---
layout: post
title: 约瑟夫问题 虚继承
category: 学习
tags: linux
keywords: linux
---
##约瑟夫问题（数学解法）
<见于《具体数学》>
问题描述：n个人（编号0~(n-1))，从0开始报数，报到(m-1)的退出，剩下的人继续从0开始报数。求胜利者的编号。

我们知道第一个人(编号一定是m%n-1) 出列之后，剩下的n-1个人组成了一个新的约瑟夫环（以编号为k=m%n的人开始）:
>* k  k+1  k+2  ... n-2, n-1, 0, 1, 2, ... k-2

并且从k开始报0。

现在我们把他们的编号做一下转换：
>* k     --> 0
>* k+1   --> 1
>* k+2   --> 2
>* ...
>* ...
>* k-2   --> n-2
>* k-1   --> n-1

变换后就完完全全成为了(n-1)个人报数的子问题，假如我们知道这个子问题的解：例如x是最终的胜利者，那么根据上面这个表把这个x变回去不刚好就是n个人情况的解吗？！！变回去的公式很简单，相信大家都可以推出来：
>* x'=(x+k)%n

如何知道(n-1)个人报数的问题的解？对，只要知道(n-2)个人的解就行了。(n-2)个人的解呢？当然是先求(n-3)的情况 ---- 这显然就是一个倒推问题！好了，思路出来了，下面写递推公式：

令f[i]表示i个人玩游戏报m退出最后胜利者的编号，最后的结果自然是f[n]

##递推公式
>* f[1]=0;
>* f[i]=(f[i-1]+m)%i;  (i>1)

有了这个公式，我们要做的就是从1-n顺序算出f[i]的数值，最后结果是f[n]。因为实际生活中编号总是从1开始，我们输出f[n]+1

##关于递推公式的理解
将这些人从0到n编号，假设除去第k个人。

>* 0, 1, 2, 3, ..., k-2, k-1, k, ..., n-1　　//original sequence (1)
>* 0, 1, 2, 3, ..., k-2,      , k, ..., n-1　　//get rid of kth person (2)
>* k, k+1, ..., n-1,    0,    1,        ..., k-2　　//rearrange the sequence (3)
>* 0, 1,     ..., n-k-1, n-k, n-k+1, ..., n-2　　//the n-1 person (4)

我们假设f(n)的值为n个人中最后存活的人的序号，则
注意到(2)式(3)式(4)式其实是同一个序列。
注意(1)式和(4)式，是同一个问题，不同的仅仅是人数。
对比(3)(4)两式，可以看出(3)中的编号x'与(4)中的编号x对应关系即为x'=(x+k) mod n

由于是逐级递推，不需要保存每个f[i]，程序也是异常简单：
##C语言实现
{% highlight c %}
#include <stdio.h>
int main()
{
  int n, m, i, s=0;
  printf ("N M = "); scanf("%d%d", &n, &m);
  for (i=2; i<=n; i++) s=(s+m)%i;
  printf ("The winner is %d\n", s+1);
}
{% endhighlight %}

这个算法的时间复杂度为O(n)，相对于模拟算法已经有了很大的提高。算n，m等于一百万，一千万的情况不是问题了。可见，适当地运用数学策略，不仅可以让编程变得简单，而且往往会成倍地提高算法执行效率。

##虚继承
虚继承仅仅在多重继承体系中才能体现其价值
下图说明了虚继承使用的典型事例:
![虚继承][1]
##非虚继承情况:
class A, class B, class D, class E均包含一个函数f().
{% highlight c++ %}
class A {};
class B: public A {};
class D: public A {};
class E: public B, public D {};
{% endhighlight %}
其中class B和class D为class A的直接子类，此时class B和class D中均有一个继承自class A的函数f(), class E为class B与class D的直接子类，当class E的对象调用f()时，会产生二义性错误，因为编译器无法确认class E时继承自class B还是class D。
##虚继承情况：
{% highlight c++ %}
class A {};
class B: virtual public A {};
class D: virtual public A {};
class E: public B, public D {};
{% endhighlight %}
但是当在继承时加入virtual这个关键字时，class B和class D中的class A的部分就会只有一份，也就是说只会有一个从class A继承来的f()函数，不会发生二义性问题。

    同时class B 与 class D 共享继承基类class A子对象，

  [1]: /public/img/虚函数.jpg
