---
layout: post
title: 进程 线程
category: 学习
tags: 总结
keywords: 学习总结
--- 


##资料一
在Unix上编程采用多线程还是多进程的争执由来已久，这种争执最常见到在B/S通讯中服务端并发技术 的选型上，比如WEB服务器技术中，Apache是采用多进程的（perfork模式，每客户连接对应一个进程，每进程中只存在唯一一个执行线 程），Java的Web容器Tomcat、Websphere等都是多线程的（每客户连接对应一个线程，所有线程都在一个进程中）。

从Unix发展历史看，伴随着Unix的诞生多进程就出现了，而多线程很晚才被系统支持，例如Linux直到内核2.6，才支持符合Posix规范的NPTL线程库。进程和线程的特点，也就是各自的优缺点如下：

>* 进程优点：编程、调试简单，可靠性较高。
>* 进程缺点：创建、销毁、切换速度慢，内存、资源占用大。
>* 线程优点：创建、销毁、切换速度快，内存、资源占用小。
>* 线程缺点：编程、调试复杂，可靠性较差。

上面的对比可以归结为一句话：“**线程快而进程可靠性高**”。线程有个别名叫“轻量级进程”，在有的书籍资料上介绍线程可以十倍、百倍的效率快于进程； 而进程之间不共享数据，没有锁问题，结构简单，一个进程崩溃不像线程那样影响全局，因此比较可靠。我相信这个观点可以被大部分人所接受，因为和我们所接受的知识概念是相符的。


##资料二

##在Linux下编程多用多进程编程少用多线程编程。
IBM有个家伙做了个测试，发现切换线程context的时候，windows比linux快一倍多。进出最快的锁（windows2k的 critical section和linux的pthread_mutex），windows比linux的要快五倍左右。当然这并不是说linux不好，而且在经过实际编程之后，综合来看我觉得linux更适合做high performance server，不过在多线程这个具体的领域内，linux还是稍逊windows一点。这应该是情有可原的，毕竟unix家族都是从多进程过来的，而 windows从头就是多线程的。
如果是UNIX/linux环境，采用多线程没必要。
**多线程比多进程性能高？误导！**
应该说，**多线程比多进程成本低，但性能更低**。
在UNIX环境，多进程调度开销比多线程调度开销，没有显著区别，就是说，UNIX进程调度效率是很高的。内存消耗方面，二者只差全局数据区，现在内存都很便宜，服务器内存动辄若干G，根本不是问题。
**多进程是立体交通系统，虽然造价高，上坡下坡多耗点油，但是不堵车。**
 **多线程是平面交通系统，造价低，但红绿灯太多，老堵车。**
我们现在都开跑车，油（主频）有的是，不怕上坡下坡，就怕堵车。
高性能交易服务器中间件，如TUXEDO，都是主张多进程的。实际测试表明，TUXEDO性能和并发效率是非常高的。TUXEDO是贝尔实验室的，与UNIX同宗，应该是对UNIX理解最为深刻的，他们的意见应该具有很大的参考意义。
 

##多线程的优点：
>* 无需跨进程边界； 
>* 程序逻辑和控制方式简单； 
>* 所有线程可以直接共享内存和变量等； 
>* 线程方式消耗的总资源比进程方式好； 

##多线程缺点：
>* 每个线程与主程序共用地址空间，受限于2GB地址空间； 
>* 线程之间的同步和加锁控制比较麻烦； 
>* 一个线程的崩溃可能影响到整个程序的稳定性； 
>* 到达一定的线程数程度后，即使再增加CPU也无法提高性能，例如Windows Server 2003，大约是1500个左右的线程数就快到极限了（线程堆栈设定为1M），如果设定线程堆栈为2M，还达不到1500个线程总数； 
>* 线程能够提高的总性能有限，而且线程多了之后，线程本身的调度也是一个麻烦事儿，需要消耗较多的CPU 
 
##多进程优点：
>* 每个进程互相独立，不影响主程序的稳定性，子进程崩溃没关系；
>* 通过增加CPU，就可以容易扩充性能；
>* 可以尽量减少线程加锁/解锁的影响，极大提高性能，就算是线程运行的模块算法效率低也没关系；
>* 每个子进程都有2GB地址空间和相关资源，总体能够达到的性能上限非常大

##多线程缺点：
>* 逻辑控制复杂，需要和主程序交互； 
>* 需要跨进程边界，如果有大数据量传送，就不太好，适合小数据量传送、密集运算 
>* 多进程调度开销比较大； 
>* 最好是多进程和多线程结合，即根据实际的需要，每个CPU开启一个子进程，这个>* 子进程开启多线程可以为若干同类型的数据进行处理。当然你也可以利用多线程+多CPU+轮询方式来解决问题方法和手段是多样的，关键是自己看起来实现方便有能够满足要求，代价也合适。
 

##进程的优点：
1.  顺序程序的特点：具有封闭性和可再现性；
2.  程序的并发执行和资源共享。多道程序设计出现后，实现了程序的并发执行和资源共享，提高了系统的效率和系统的资源利用率。
进程的缺点：
操作系统调度切换多个线程要比切换调度进程在速度上快的多。而且进程间内存无法共享，通讯也比较麻烦。
线程之间由于共享进程内存空间，所以交换数据非常方便；在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。
   
 
##线程的优点：
1.  它是一种非常"节俭"的多任务操作方式。在Linux系统下，启动一个新的进程必须分配给它独立的地址空间，建立众多的数据表来维护它的代码段、堆栈段和数据段，这是一种"昂贵"的多任务工作方式。而运行于一个进程中的多个线程，它们彼此之间使用相同的地址空间，共享大部分数据，启动一个线程所花费的空间远远小于启动一个进程所花费的空间，而且，线程间彼此切换所需的时间也远远小于进程间切换所需要的时间。当然，在具体的系统上，这个数据可能会有较大的区别；
2.  线程间方便的通信机制，由于同一进程下的线程之间共享数据空间，所以一个线程的数据可以直接为其它线程所用，这不仅快捷，而且方便；
3.  使多CPU系统更加有效。操作系统会保证当线程数不大于CPU数目时，不同的线程运行于不同的CPU上；
4.  改善程序结构。一个既长又复杂的进程可以考虑分为多个线程，成为几个独立或半独立的运行部分，这样的程序会利于理解和修改。
线程的缺点：
    1.  调度时, 要保存线程状态，频繁调度, 需要占用大量的机时；
    2.  程序设计上容易出错（线程同步问题）

