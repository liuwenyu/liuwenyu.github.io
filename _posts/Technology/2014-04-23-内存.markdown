---
layout: post
title: 内存 复制控制
category: 学习
tags: linux
keywords: linux
---

##派生类的复制控制
{% highlight c++ %}
#include <iostream>
#include <string>
using namespace std;

class Person { 

public:
        Person(int id, const string &name) :
                        _id(id), _name(name) {

        }

        Person(const Person &other) :
                        _id(other._id), _name(other._name) {
        }

        Person &operator=(const Person &other) {
                if (this != &other) {
                        _id = other._id;
                        _name = other._name;
                }
                return *this;
        }

        virtual void print() {
                cout << "id: " << _id << " name: " << _name << endl;
        }

        virtual ~Person() {

        }

private:
        int _id;
        string _name;
};

class Student: public Person {

public:
        Student(int id, const string &name, const string &school) :
                        Person(id, name), _school(school) {

        }

        Student(const Student &other) :
                        Person(other), _school(other._school) {

        }

        Student &operator=(const Student &other) {
                if (this != &other) {
                        Person::operator =(other);
                        _school = other._school;
                }
                return *this;
        }

        void print() {
                Person::print();
                cout << "school: " << _school << endl;
        }

private:
        string _school;
};

class Worker: public Person {

private:
        string _factory;
};

int main(int argc, char **argv) {
        Student s(234, "zhangsan", "shiyan");
        s.print();

        Student s2(s);
        s2.print();
        Student s3(234556, "lisi", "shiyan2");
        s3.print();
        s3 = s2;
        s3.print();
}
{% endhighlight %}

##线程池
##noncopyable.h
{% highlight c++ %}


#ifndef NONCOPYABLE_H_
#define NONCOPYABLE_H_

/*
 * 把拷贝构造函数和赋值运算符设为私有，是为了防止对象的复制
 * 把构造函数和析构函数设为protected，是防止生成本类的对象
 */
class noncopyable {

protected:
	noncopyable() {

	}
	~noncopyable() {

	}

private:
	noncopyable(const noncopyable&);
	noncopyable &operator=(const noncopyable &);
};

#endif /* NONCOPYABLE_H_ */
{% endhighlight %}
##Thread.h
{% highlight c++ %}


#ifndef THREAD_H_
#define THREAD_H_

#include <pthread.h>
#include <stdexcept>

/*
 * 这个线程类是个抽象类，希望派生类去改写它
 */
class Thread {

public:
	Thread();
	virtual ~Thread();

	void start();
	void join();
	static void *thread_func(void *);
	/*
	 * 这是个纯虚函数
	 */
	virtual void run() = 0;
	pthread_t get_tid() const;

protected:
	pthread_t _tid;
};

#endif /* THREAD_H_ */
{% endhighlight %}
##Thread.cpp
{% highlight c++ %}


#include "Thread.h"

Thread::Thread() :
		_tid(0) {

}
Thread::~Thread() {

}

void Thread::start() {
	//采用静态函数的指针作为回调函数
	//this作为线程的参数
	pthread_create(&_tid, NULL, Thread::thread_func, this);
}
void Thread::join() {
	pthread_join(_tid, NULL);
}
void *Thread::thread_func(void *arg) {
	//arg实际上是线程对象的指针，类型为实际线程的类型
	Thread *p_thread = static_cast<Thread*>(arg);
	//这里利用了动态绑定
	p_thread->run();
	return NULL;
}

pthread_t Thread::get_tid() const {
	return _tid;
}
{% endhighlight %}
##ThreadPool.h
{% highlight c++ %}


#ifndef THREADPOOL_H_
#define THREADPOOL_H_

#include <queue>
#include <vector>
#include "WorkThread.h"
#include "MutexLock.h"
#include "Condition.h"
#include "noncopyable.h"

struct Task {
	int _num;
};

class ThreadPool: public noncopyable {
public:

	ThreadPool(std::vector<WorkThread>::size_type max_thread);
	~ThreadPool();

	void start_thread_pool();
	void stop_thread_pool();

	bool add_task_queue(Task task);
	bool get_task_queue(Task &task);

	bool is_task_queue_empty() const;
	std::queue<Task>::size_type get_task_queue_size() const;

private:
	std::queue<Task> _task_queue;   //任务队列
	std::vector<WorkThread>::size_type _max_thread; //线程的数目
	std::vector<WorkThread> _thread_vector;  //用来存储线程
	bool _is_started;  //标示线程池是否开启

	mutable MutexLock _lock;    //用来保持对队列的互斥操作
	mutable Condition _cond;	//实现对队列任务的同步操作

};

#endif /* THREADPOOL_H_ */
{% endhighlight %}
##ThreadPool.cpp
{% highlight c++ %}


#include "ThreadPool.h"

/*
 * 构造函数除了初始化每个成员变量之外
 * 还需要依次对线程数组中的每个线程注册自身
 */
ThreadPool::ThreadPool(std::vector<WorkThread>::size_type max_thread) :
		_task_queue(), _max_thread(max_thread), _thread_vector(_max_thread), _is_started(
				false), _lock(), _cond(&_lock)

{
	for (std::vector<WorkThread>::iterator iter = _thread_vector.begin();
			iter != _thread_vector.end(); ++iter) {
		//注册线程池
		iter->register_thread_pool(this);
	}

}

ThreadPool::~ThreadPool() {
	stop_thread_pool();
}

void ThreadPool::start_thread_pool() {
	if (_is_started == false) {
		/*
		 * 下面这行代码必须放在开头，防止线程启动后
		 * 因为is_start这个变量异常退出
		 */
		_is_started = true;  // first
		for (std::vector<WorkThread>::iterator iter = _thread_vector.begin();
				iter != _thread_vector.end(); ++iter) {
			iter->start();
		}

	}
}
void ThreadPool::stop_thread_pool() {
	if (_is_started == false) {
		return;
	}
	/*
	 * 这句话同样必须放在开头，以便于线程及时退出
	 */
	_is_started = false;
	/*
	 * 用来激活所有正在等待任务的线程
	 * 让它们退出循环，同时检测到布尔值的变化
	 * 而使得线程退出
	 */
	_cond.notify_all();

	for (std::vector<WorkThread>::iterator iter = _thread_vector.begin();
			iter != _thread_vector.end(); ++iter) {
		iter->join();
	}
	//清空队列
	while(!_task_queue.empty()){
		_task_queue.pop();
	}
}

bool ThreadPool::get_task_queue(Task &task) {
	_lock.lock();

	/*
	 * 这里必须使用while循环
	 */
	while (_is_started && _task_queue.empty()) {
		_cond.wait();
	}
	/*
	 * 这里布尔值为false存在三种情况：
	 * 1.运行到这里线程池还没有开启
	 * 2.线程拿到了任务，退出了循环，但是线程池此刻关闭
	 * 3.线程正在等待任务，被stop函数中的notify_all函数
	 * 所激活，此时需要退出
	 */
	if (_is_started == false) {
		_lock.unlock();
		return false;
	}

	task = _task_queue.front();
	_task_queue.pop();
	_lock.unlock();
	return true;
}
/*
 * 向任务队列中添加任务
 */
bool ThreadPool::add_task_queue(Task task) {
	_lock.lock();

	bool ret = false;
	if (_is_started) {
		_task_queue.push(task);
		//激活某个正在等待任务的线程
		_cond.notify();
		ret = true;
	}

	_lock.unlock();
	return ret;
}

bool ThreadPool::is_task_queue_empty() const{
	_lock.lock();
	bool ret = _task_queue.empty();
	_lock.unlock();
	return ret;
}
std::queue<Task>::size_type ThreadPool::get_task_queue_size() const{
	_lock.lock();
	std::queue<Task>::size_type ret = _task_queue.size();
	_lock.unlock();
	return ret;
}
{% endhighlight %}
##WorkThread.h
{% highlight c++ %}


#ifndef WORKTHREAD_H_
#define WORKTHREAD_H_

#include <pthread.h>
#include "Thread.h"

class ThreadPool;

class WorkThread: public Thread {

public:
	void run();
	void register_thread_pool(ThreadPool *p_thread_pool); //注册线程池
	void compute_task(int num);   //实际的工作函数，由run来调用

private:
	ThreadPool *_p_thread_pool; //线程池的指针，用来指定线程去哪里获取任务
};

#endif /* WORKTHREAD_H_ */
{% endhighlight %}

##WorkThread.cpp
{% highlight c++ %}


#include "WorkThread.h"
#include <iostream>
#include "ThreadPool.h"
using namespace std;

void WorkThread::run() {
	while (true) {
		Task task;
		/*
		 * 如果获取任务时，返回值为false，那么说明线程池已经关闭，所以
		 * 此时线程需要退出死循环
		 */
		bool ret = _p_thread_pool->get_task_queue(task);
		if (ret == false) {
			return;
		}
		compute_task(task._num);
	}
}

void WorkThread::compute_task(int num) {
	cout << num * num << endl;
}

void WorkThread::register_thread_pool(ThreadPool *p_thread_pool) {
	_p_thread_pool = p_thread_pool;
}
{% endhighlight %}

##笔记
##1. 内存的五大区域：
栈、heap、全局静态区、代码区、文字常量区
分析一个class的内存布局：静态变量存储在全局静态区、静态函数和其他普通函数都存储在代码区。

##2. class和struct的区别：
>* a) 默认权限不同，class为private（不建议使用！），struct默认为public
>* b) 继承上的区别，class默认为private继承，struct默认为public继承

3. 具有virtual函数的对象的内存布局：对象的首部含有一个vptr（虚指针），指向内存中的虚函数表（vtable）。

4. 触发动态绑定时，派生类继承了base的所有成员和vptr，但是它在vtable中覆盖了base的虚函数。所以运行期间，base指针找到什么对象，他调用的就是什么类型对象的函数。

##5. 参考资料：http://blog.csdn.net/haoel/article/details/1948051
##6. 构造函数执行的顺序：
>* a) 先执行base的构造函数
>* b) 成员对象的构造函数
>* c) 自身的构造函数
	
7. 析构函数的顺序与之相反！
#总结




